name: Terraform AWS Infrastructure CI/CD
on:
  # Trigger on pushes to the main branch, but only if files in terraform/aws/ change
  push:
    branches:
      - main
    paths:
      - 'terraform/aws/**'
      - '.github/workflows/terraform-ci-cd.yml' # Also run if this workflow file changes
  # Trigger on Pull Requests targeting the main branch, only if terraform/aws/ files change
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/aws/**'
      - '.github/workflows/terraform-ci-cd.yml'
  # Allow manual triggering from the GitHub Actions UI
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action (plan, apply, or destroy)'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: "us-east-1"  # Change this if your default region in variables.tf is different
  TF_WORKING_DIR: ./terraform/aws
  TF_STATE_BUCKET: "BUCKET_NAME_PLACEHOLDER" # Will replace this in next step

jobs:
  terraform_plan_on_pr:
    name: Terraform Plan (on PR)
    if: github.event_name == 'pull_request' # Only run this job for pull requests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set environment
        run: |
          # Use PR number as environment identifier
          echo "TF_VAR_environment=pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "TF_WORKSPACE=pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
      
      - name: Terraform Init with S3 Backend
        run: |
          # Create backend configuration
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "${{ env.TF_STATE_BUCKET }}"
              key            = "${{ env.TF_WORKSPACE }}/terraform.tfstate"
              region         = "${{ env.AWS_REGION }}"
              encrypt        = true
            }
          }
          EOF
          
          terraform init -input=false
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Terraform Plan
        run: terraform plan -input=false -no-color
        env:
          TF_VAR_rds_password: ${{ secrets.TF_VAR_RDS_PASSWORD }}
  
  terraform_deploy_to_dev:
    name: Deploy to Development Environment
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      (!contains(github.event.head_commit.message, 'docs:') && !contains(github.event.head_commit.message, 'DOCS:')) &&
      (!contains(github.event.head_commit.message, 'readme') && !contains(github.event.head_commit.message, 'README'))
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set environment
        run: |
          # Use dev as the fixed environment name
          echo "TF_VAR_environment=dev" >> $GITHUB_ENV
          echo "TF_WORKSPACE=dev" >> $GITHUB_ENV
      
      - name: Terraform Init with S3 Backend
        run: |
          # Create backend configuration
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "${{ env.TF_STATE_BUCKET }}"
              key            = "${{ env.TF_WORKSPACE }}/terraform.tfstate"
              region         = "${{ env.AWS_REGION }}"
              encrypt        = true
            }
          }
          EOF
          
          terraform init -input=false
      
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_rds_password: ${{ secrets.TF_VAR_RDS_PASSWORD }}
      
      - name: Cleanup on Failure
        if: failure()
        run: terraform destroy -auto-approve -input=false
        env:
          TF_VAR_rds_password: ${{ secrets.TF_VAR_RDS_PASSWORD }}
  
  terraform_manual_action:
    name: Terraform Manual Action
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Set environment
        run: |
          echo "TF_VAR_environment=dev" >> $GITHUB_ENV
          echo "TF_WORKSPACE=dev" >> $GITHUB_ENV
      
      - name: Terraform Init with S3 Backend
        run: |
          # Create backend configuration
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "${{ env.TF_STATE_BUCKET }}"
              key            = "${{ env.TF_WORKSPACE }}/terraform.tfstate"
              region         = "${{ env.AWS_REGION }}"
              encrypt        = true
            }
          }
          EOF
          
          terraform init -input=false
      
      - name: Terraform Plan
        if: github.event.inputs.action == 'plan'
        run: terraform plan -input=false -no-color
        env:
          TF_VAR_rds_password: ${{ secrets.TF_VAR_RDS_PASSWORD }}
      
      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_rds_password: ${{ secrets.TF_VAR_RDS_PASSWORD }}
      
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          echo "ğŸš¨ Destroying all infrastructure in environment: dev ğŸš¨"
          terraform destroy -auto-approve -input=false
        env:
          TF_VAR_rds_password: ${{ secrets.TF_VAR_RDS_PASSWORD }}
